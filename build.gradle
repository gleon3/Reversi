plugins {
  id "java"
  id "application"
  id "checkstyle"
  id "com.github.spotbugs" version "3.0.0"
}

repositories {
  jcenter()
}

dependencies {
	testCompile 'org.junit.jupiter:junit-jupiter:5.5.2'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'
	testCompile "org.mockito:mockito-core:2.+"
	compile "com.google.code.gson:gson:2.8.6"
}

application {
    mainClassName = 'reversi.ReversiMain'
}

task reversiMainJar(type: Jar) {
  dependsOn compileJava

  archiveBaseName = "ReversiMain"
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  with jar
  
  from (sourceSets.main.output) {
    include "**"
    exclude "**/Server.class"  // not needed for ReversiMain
  }

  manifest {
    attributes(
      'Main-Class': 'reversi.ReversiMain'
    )
  }
}

task serverJar(type: Jar) {
  dependsOn compileJava

  archiveBaseName = "Server"
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  with jar
  
  from (sourceSets.main.output) {
    include "**"
    exclude "**/ReversiMain.class"  // not needed for Server
  }

  manifest {
    attributes(
      'Main-Class': 'reversi.model.network.Server'
    )
  }
}


task jar(type: Jar, overwrite: true) {
  dependsOn reversiMainJar, serverJar
  actions = []  // don't do anything besides calling the dependent jar tasks
}


checkstyle {
  configFile = file('test/checkstyle.xml')
  maxWarnings = 0
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}
